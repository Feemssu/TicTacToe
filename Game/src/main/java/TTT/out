/*
    private static void round3x3(Scanner scanner) {

        char[][] board = new char[3][3];
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[i].length; j++){
                board[i][j] = ' ';
            }
        }
        System.out.println("If you wanna play with friend press [F] or with computer press [C]");
        String chooseGamemode;
        while(true) {
            chooseGamemode = scanner.nextLine().toUpperCase();
            if (chooseGamemode.equals("F")) {
                startGameWithFriend(scanner, board);
                break;
            } else if (chooseGamemode.equals("C")) {
                startGameWithComputer(scanner, board);
                break;
            } else {
                System.out.println("You choose bad key, try again");
            }
        }
    }

    private static void round10x10(Scanner scanner){

        char[][] board = new char[10][10];
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[i].length; j++){
                board[i][j] = ' ';
            }
        }
        System.out.println("You started game 10x10 with friend");
        startGameWithFriend10x10(scanner, board);
    }
*/
    /*
    public static void gameWithComputer(Scanner scanner, char[][] board){
        printBoard(board);

        while(true){
            playerX(scanner, board);
            if(isGameEnd3x3(board)){
                break;
            }
            printBoard(board);
            computerMove(board);
            if(isGameEnd3x3(board)){
                break;
            }
            printBoard(board);
        }
}

    public static void gameWithFriend(Scanner scanner, char[][] board) {
        printBoard(board);


        while(true){
            playerX(scanner, board);
            if(isGameEnd3x3(board)){
                break;
            }
            printBoard(board);
            playerO(scanner, board);
            if(isGameEnd3x3(board)){
                break;
            }
            printBoard(board);
        }
    }

    public static void gameWithFriend10x10(Scanner scanner, char[][] board) {
        printBoard(board);


        while(true){
            playerX(scanner, board);
            if(isGameEnd10x10(board)){
                break;
            }
            printBoard(board);
            playerX(scanner, board);
            if(isGameEnd10x10(board)){
                break;
            }
            printBoard(board);
        }
    }
*/
/*
    public static boolean isGameEnd3x3(char[][] board){
        //check player X win
        if(checkWin3x3(board, 'X')){
            printBoard(board);
            System.out.println("Player X won");
            return true;
        }
        //check player O win
        if(checkWin3x3(board, 'O')){
            printBoard(board);
            System.out.println("Player O won");
            return true;
        }
        //make board and check does it have free fields
        for(int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == ' ') {
                    return false;
                }
            }
        }
        printBoard(board);
        System.out.println("Tie");
        return true;
    }

    public static boolean isGameEnd10x10(char[][] board){
        //check player X win
        if(checkWin10x10(board, 'X')){
            printBoard(board);
            System.out.println("Player X won");
            return true;
        }
        //check player O win
        if(checkWin10x10(board, 'O')){
            printBoard(board);
            System.out.println("Player O won");
            return true;
        }
        //make board and check does it have free fields
        for(int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == ' ') {
                    return false;
                }
            }
        }
        printBoard(board);
        System.out.println("Tie");
        return true;
    }
*/

 /*
    public static boolean checkWin3x3(char[][] board, char mark){
        for(int i = 0; i < 3; i++){
            if( //horizontal
                (board[i][0] == mark && board[i][1] == mark && board[i][2] == mark)  ||
                //vertical
                (board[0][i] == mark && board[1][i] == mark && board[2][i] == mark) ||
                //diagonal
                (board[0][0] == mark && board[1][1] == mark && board[2][2] == mark ) ||
                (board[0][2] == mark && board[1][1] == mark && board[2][0] == mark )){
                return true;
            }
        }
        return false;
    }

    public static boolean checkWin10x10(char[][] board, char mark){
        // horizontal and vertical
        for(int i = 0; i < 10; i++){
            for(int j = 0; j < 6; j++) {
                if ((board[i][j] == mark && board[i][j+1] == mark && board[i][j+2] == mark && board[i][j+3] == mark && board[i][j+4] == mark) ||
                        (board[j][i] == mark && board[j+1][i] == mark && board[j+2][i] == mark && board[j+3][i] == mark && board[j+4][i] == mark)) {
                    return true;
                }
            }
        }

        // 1st diagonal
        for(int i = 0; i < 6; i++){
            for(int j = 0; j < 6; j++){
                if((board[i][j] == mark && board[i+1][j+1] == mark && board[i+2][j+2] == mark && board[i+3][j+3] == mark && board[i+4][j+4] == mark)){
                    return true;
                }
            }
        }

        // 2nd diagonal
        for(int i = 0; i < 6; i++){
            for(int j = 9; j > 3; j--){
                if((board[i][j] == mark && board[i+1][j-1] == mark && board[i+2][j-2] == mark && board[i+3][j-3] == mark && board[i+4][j-4] == mark)){
                    return true;
                }
            }
        }
        return false;
    }
*/
/*
    private static void playerO(Scanner scanner, char[][] board) {
        char mark = 'O';
        System.out.println("Player O, please make your move.");
        move(scanner, board, mark);
    }

    private static void playerX(Scanner scanner, char[][] board) {
        char mark = 'X';
        System.out.println("Player X, please make your move.");
        move(scanner, board, mark);
    }
*/
/*
    private static void move(Scanner scanner, char[][] board, char mark) {
        String userInput;
        String userInput2;

        while (true) {
            try {
                System.out.println("Choose row");
                userInput = scanner.nextLine();
                System.out.println("Choose column");
                userInput2 = scanner.nextLine();
                if (canPutMark(board, userInput, userInput2)) {
                    break;
                } else {
                    System.out.println("You cant put here your mark, please try again");
                }

            }catch (ArrayIndexOutOfBoundsException e){
                System.out.println("You choose bad keys, please try again");
            }
        }
        placeMark(board, userInput, userInput2, mark);
    }

 */
/*
    private static void computerMove(char[][] board){
        Random random = new Random();
        char mark = 'O';
        int rand;
        int rand2;

        while(true){
            rand = random.nextInt(3);
            rand2 = random.nextInt(3);
            if(canPutMark(board, Integer.toString(rand), Integer.toString(rand2))){
                break;
            }
        }
        System.out.println("Computer choose position row " + rand + " and column " + rand2);
        placeMark(board, Integer.toString(rand), Integer.toString(rand2), mark);
    }
*/
/*
    private static void placeMark(char[][] board, String boardPosition,String boardPosition2, char mark) {
        board[Integer.parseInt(boardPosition)][Integer.parseInt(boardPosition2)] = mark;
    }

    public static boolean canPutMark(char[][] board, String boardPosition, String boardPosition2){
        return (board[Integer.parseInt(boardPosition)][Integer.parseInt(boardPosition2)] == ' ' );

    }
*/
/*
    private static void printBoard(char[][] board) {
        for(int i = 0; i < board.length; i++) {
            System.out.print("\t " + i);
        }
        System.out.println();
        for(int i = 0; i < board.length; i++){
            System.out.println("\t" + "-".repeat(board.length*4));
            System.out.print(i +" \t");
            for(int j = 0; j < board[i].length; j++){

                System.out.print( "|" + board[i][j] + "|\t");

            }
            System.out.println();
        }
    }
 */